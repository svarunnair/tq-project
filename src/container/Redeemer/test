const getTransactions = async (selectedFilter = null, eventid = null, page = 0, pageLimit = 10) => {
    setIsRefreshing(true);
    const nodeToken = await getNodeToken();
    let eventsList = props?.selectedFilter?.find(item => item?.name === eventid);
    let evntId = eventsList?.id;
    const response = await getNodeData(
      `service/tickets_service/v1/redemptions/action/redeem/event/${evntId}?pagination=true&page=${page}&page_size=${pageSize}`,
      {},
      nodeToken,
      { 'user': props.nodeUserData.user }
    );

    if (response.statusCode == 200) {
      if (response.errors) {
        showToast(response.message);
        setIsLoading(false);
        return;
      }

      props.updateTotalAmount(response.counts.total_redeemed);
      let data = response._payload;
      let settleddata = [];
      let unsettleddata = [];

      if (data && data.length > 0) {
        settleddata = data.filter(item => item.settlement_status === "settled");
        unsettleddata = data.filter(item => item.settlement_status === "unsettled");
      }

      if (page === 0) {
        // On the first page, replace the existing data
        props.updatesTransactions(settleddata);
        props.updateusTransactions(unsettleddata);
      } else {
        // On subsequent pages, append the new data
        props.updatesTransactions(prev => [...prev, ...settleddata]);
        props.updateusTransactions(prev => [...prev, ...unsettleddata]);
      }

      setIsLoading(false);
      setIsRefreshing(false);
    } else {
      setIsLoading(false);
      setIsRefreshing(false);
      showToast(response.message ? response.message : 'Session might expired, please login again.');
      onClickForget();
    }
  };




























  import React, { useState, useRef, useEffect } from 'react';
import TransactionComponent from '../../../screens/Redeemer/Home/TransactionComponent';
import { useNavigation } from '@react-navigation/core';
import { connect } from 'react-redux';
import { getData, postData,postNodeData,getNodeData } from '../../../services/rootService';
import { getToken,getNodeToken } from '../../../services/persistData';
import { showToast } from '../../../components/common/ShowToast';

const TransactionContainer = (props) => {

    const navigation = useNavigation();
    const [isModal, setIsModal] = useState(true);
    const [isDetailModal, setIsDetailModal] = useState({visible:false,data:''});
    const [isBtnSelected, setIsBtnSelected] = useState('unsettled');
    // const [sTransactions, setSTransactions] = useState(props.sTransactions);
    // const [usTransactions, setUsTransactions] = useState(props.usTransactions);
    const [isRefreshing, setisRefreshing] = useState(false);
    const [totalAmount, setTotalAmount] = useState(props.totalAmount);
    const [searchQuery, setSearchQuery] = useState('');
    const [filteredSTransactions, setFilterdSTransactions] = useState([]);
    const [filteredUSTransactions, setFilterdUSTransactions] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const refRBSheet = useRef();
    const [isPopMenu, setIsPopMenu] = useState(false);
    const [onChangeStaffList, setonChangeStaffList] = useState(false);
    const [page, setPage] = useState(0);
    const [totalPages, setTotalPages] = useState(0);
    const [paginationCount,setPaginetionCount] = useState(0)

    
// service/tickets_service/v1/redemptions/action/redeem/event/live?live_event=true&settlement_status=unsettled&page=0&sort=&page_size=4

    // const getTransactions=async(sek)=>{
    //     const nodeToken = await getNodeToken();
    //     let evntId=props.selectedFilter[0].id
    //     let pageCount = 0
    //     let  settlestatus = isBtnSelected
    //     // service/tickets_service/v1/redemptions/action/redeem/event/live?live_event=true&page='+pageCount+'&sort=&page_size=15
    //     const response = await getNodeData('service/tickets_service/v1/redemptions/action/redeem/event/live?live_event=true&settlement_status='+settlestatus+'&page='+pageCount+'&sort=&page_size=15',{}, nodeToken,
    //     { 'user': props.nodeUserData.user });
    //     console.log(response);
    //     if (response.statusCode == 200) {
    //         if (response.errors) {
    //             showToast(response.message);
    //             setIsLoading(false);
    //             return;
    //         }
    //         props.updateTotalAmount(response.counts.total_redeemed);
    //         let data=response._payload;
    //         let settleddata=data.filter((item)=>{return item.settlement_status=="settled"})
    //         let unsettleddata=data.filter((item)=>{return item.settlement_status=="unsettled"})
    //         console.log(unsettleddata);
    //         props.updatesTransactions(settleddata);
    //         props.updateusTransactions(unsettleddata);
    //         setIsLoading(false);
    //         setisRefreshing(false)
    //     } else {
    //         setIsLoading(false);
    //         setisRefreshing(false)
    //         showToast(
    //             response.message ? response.message : 'Session might expired, please login again.'
    //         );
    //         onClickForget();
    //     }
    // }

    // const handleScroll =(e)=>{
    //     setPageNumber()
    // }

    const handlePageCount =(e)=>{
        setPaginetionCount(e)
    }
    console.log('............paginationCount......TEST......',paginationCount);
    
    useEffect(()=>{
        getTransactions()
    },[paginationCount])



    const getTransactions=async(selectedFilter=null,nextpage=null)=>{
        setisRefreshing(true)
        let pageCount=0;
        console.log("pagination.;;;;;;;;;;;;;",nextpage,pageCount,totalPages);
        if (nextpage && pageCount!=0 && pageCount >= totalPages) {
            setisRefreshing(false);
            return;
        }
        if(nextpage){
            setPage(page => page + 1);
            pageCount=page+1;
        }
        const nodeToken = await getNodeToken();
        let evntId=props.selectedFilter[0].id;
        console.log("asasasdasdasd",selectedFilter);
        let settlestatus = selectedFilter ? selectedFilter : isBtnSelected;
        const response = await getNodeData('service/tickets_service/v1/redemptions/action/redeem/event/live?live_event=true&settlement_status='+settlestatus+'&page='+pageCount+'&sort=&page_size=15',{}, nodeToken,
        { 'user': props.nodeUserData.user });
        console.log(response);
        if (response.statusCode == 200) {
            if (response.errors) {
                showToast(response.message);
                setIsLoading(false);
                return;
            }
            setIsLoading(false);
            setisRefreshing(false);
            props.updateTotalAmount(response.counts.total_redeemed);
            setTotalPages(response.totalPages);
            let data=response && response._payload ? response._payload : [];
            if(settlestatus == 'settled'){
                props.updatesTransactions(pageCount!==0 ? [...props.allsTransactions, ...data] : data);
                props.updateusTransactions([]);
            }else{
                props.updateusTransactions(pageCount!==0 ? [...props.allusTransactions, ...data]: data);
                props.updatesTransactions([]);
            }
        } else {
            setIsLoading(false);
            setisRefreshing(false)
            if (response == "Unauthorized request") {
                onClickForget();
            }
            showToast(
                response.message ? response.message : 'Session might expired, please login again.'
            );
        }
    }

    const onClickBack = () => {
        navigation.goBack();
    }

    useEffect(()=>{
      getTransactions()  
    },[isBtnSelected])

  

    const onSearch = query => {
        setSearchQuery(query.toLowerCase());
       
        const searchResult = props.usTransactions.filter(function (item) {
   
          return ( 
            (item['bill_number'] && item['bill_number'].toString().toLowerCase().includes(query.toLowerCase())) || 
          item["ticket_tracking_id"].toString().toLowerCase().includes(query.toLowerCase()) || 
          item["value"].toString().toLowerCase().includes(query.toLowerCase()) || 
          item["customer_name"].toString().toLowerCase().includes(query.toLowerCase())
          )
        });
        const searchResult1 = props.sTransactions.filter(function (item) {
            return ( 
            (item['bill_number'] && item['bill_number'].toString().toLowerCase().includes(query.toLowerCase())) || 
            item["ticket_tracking_id"].toString().toLowerCase().includes(query.toLowerCase()) || 
            item["value"].toString().toLowerCase().includes(query.toLowerCase()) || 
            item["customer_name"].toString().toLowerCase().includes(query.toLowerCase())
            )
        });
        if(searchQuery.length<query.length && query.length>=3 && searchResult.length<=0 && searchResult1.length<=0){
            showToast("No result found..");
        }
        setFilterdUSTransactions(searchResult);
        setFilterdSTransactions(searchResult1);
      };

      const onClickMoveToSettled=async()=>{
        let data = isDetailModal.data
        setIsDetailModal({visible:!isDetailModal.visible,data:''})
        setIsLoading(true)
        const nodeToken = await getNodeToken();
        const response = await postNodeData('service/tickets_service/v1/redemptions/settle/'+data._id,{}, nodeToken,
        { 'user': props.nodeUserData.user });
        if (response.statusCode == 200) {
            if (response.errors) {
                showToast(response.message);
                setIsLoading(false);
                return;
            }
            setIsLoading(false);
            setisRefreshing(true);
            getTransactions();
            // setIsBtnSelected("settled");
        } else {
            setIsLoading(false);
            showToast(
                response.message ? response.message : 'Something went wrong, try again',
            );
        }
    }

    // const getCurrentSelectedCount=(data)=>{
    //     // let data = props.saffsList;
    //     let selectedCount=0;
    //     for (let i = 0; i < data.length; i++) {
    //         if(data[i].selected){
    //             selectedCount=selectedCount+1;
    //         }
    //     }
    //     return selectedCount;
    // }

    // const onChangeFilterData=(index)=>{
    //     let data = props.saffsList;
    //     if(index==-1){
    //         let selectedCount=getCurrentSelectedCount(data);
    //         if(selectedCount==data.length){
    //             // showToast("Please  atleast one.")
    //             for (let i = 0; i < data.length; i++) {
    //                 data[i].selected=false;
    //             }
    //             props.updateSelectedFilter('self');
    //             data[0].selected=true;
    //             setisRefreshing(true);
    //             getTransactions('self');
    //         }else{
    //             props.updateSelectedFilter('all')
    //             setisRefreshing(true);
    //             getTransactions('all');
    //             for (let i = 0; i < data.length; i++) {
    //                 data[i].selected=true;
    //             }
    //         }
    //     }else{
    //         let selectedCount=getCurrentSelectedCount(data);
    //         if(selectedCount-1==0 && data[index].selected){
    //             showToast("Please select atleast one.")
    //         }else{
    //             data[index].selected=!data[index].selected;
    //             let selectedCount=getCurrentSelectedCount(data);
    //             if(selectedCount==data.length){
    //                 props.updateSelectedFilter('all')
    //                 setisRefreshing(true);
    //                 getTransactions('all');
    //             }else if(selectedCount==1 && data[0].selected){
    //                 props.updateSelectedFilter('self')
    //                 setisRefreshing(true);
    //                 getTransactions('self');
    //             }else{
    //                 props.updateSelectedFilter('custom')
    //                 setisRefreshing(true);
    //                 getTransactions('custom');
    //             }
    //         }
    //     }
    //     setonChangeStaffList(!onChangeStaffList);
    //     props.updateStaffsList(data);
    // }

    // const setSelectedFilter=(val)=>{
    //     let data = props.saffsList;
    //     for (let i = 0; i < data.length; i++) {
    //         if(val=='all'){
    //             data[i].selected=true;
    //         }else if(val=='self' && i==0){
    //             data[i].selected=true;
    //         }else{
    //             data[i].selected=false;
    //         }
    //     }
    //     if(val=='all' || val=='self'){
    //         props.updateSelectedFilter(val);
    //     }else{
    //         getStaffs();
    //     }
    //     props.updateStaffsList(data);
    // }
    

    return (
        <TransactionComponent
            onPage={handlePageCount}
            onClickBack={onClickBack}
            isModal={isModal}
            setIsModal={setIsModal}
            isDetailModal={isDetailModal}
            setIsDetailModal={setIsDetailModal}
            isBtnSelected={isBtnSelected}
            setIsBtnSelected={setIsBtnSelected}
            sTransactions={props.sTransactions}
            usTransactions={props.usTransactions}
            isRefreshing={isRefreshing}
            setisRefreshing={setisRefreshing}
            // getTransactions={()=>getTransactions()}
            getTransactions={(status,nextpage)=>getTransactions(status,nextpage)}
            searchQuery={searchQuery}
            onSearch={onSearch}
            filteredSTransactions={filteredSTransactions}
            filteredUSTransactions={filteredUSTransactions}
            onClickMoveToSettled={onClickMoveToSettled}
            isLoading={isLoading}
            refRBSheet={refRBSheet}
            saffsList={props.saffsList}
            isPopMenu={isPopMenu}
            setIsPopMenu={setIsPopMenu}
            onChangeStaffList={onChangeStaffList}
            userData={props.nodeUserData}
        />
    );
}

// export default TransactionContainer;

const mapStateToProps = state => ({
    userData: state.userreducer.userData,
    sTransactions: state.transactionsreducer.sTransactions,
    usTransactions: state.transactionsreducer.usTransactions,
    totalAmount: state.transactionsreducer.totalAmount,
    saffsList: state.transactionsreducer.saffsList,
    selectedFilter: state.transactionsreducer.selectedFilter,
    nodeUserData: state.userreducer.nodeUserData,
});

const mapDispatchToProps = dispatch => ({
    updateuser:(userData) => dispatch({type: 'UPDATE_USERDATA', payload: {userData:userData}}),
    updatesTransactions:(sTransactions) => dispatch({type: 'UPDATE_S_TRANSACTIONS', payload: {sTransactions:sTransactions}}),
    updateusTransactions:(usTransactions) => dispatch({type: 'UPDATE_US_TRANSACTIONS', payload: {usTransactions:usTransactions}}),
    updateTotalAmount:(totalAmount) => dispatch({type: 'UPDATE_TOTAL_AMOUNT', payload: {totalAmount:totalAmount}}),
    updateStaffsList:(saffsList) => dispatch({type: 'UPDATE_STFFS_LIST', payload: {saffsList:saffsList}}),
    updateSelectedFilter:(selectedFilter) => dispatch({type: 'UPDATE_SELECTED_FILTER', payload: {selectedFilter:selectedFilter}})
});


export default connect(mapStateToProps,mapDispatchToProps)(TransactionContainer)